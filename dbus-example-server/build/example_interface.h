/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p example_interface.h: ../dbus.demo.example.xml
 *
 * qdbusxml2cpp is Copyright (C) 2020 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef EXAMPLE_INTERFACE_H
#define EXAMPLE_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface local.dbus_demo_example
 */
class LocalDbus_demo_exampleInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "local.dbus_demo_example"; }

public:
    LocalDbus_demo_exampleInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~LocalDbus_demo_exampleInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> return_bool()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("return_bool"), argumentList);
    }

    inline QDBusPendingReply<int> return_integer()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("return_integer"), argumentList);
    }

    inline QDBusPendingReply<int, QString, QString> return_integet_and_set_integer(int argc_1, const QString &argc_22)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(argc_1) << QVariant::fromValue(argc_22);
        return asyncCallWithArgumentList(QStringLiteral("return_integet_and_set_integer"), argumentList);
    }
    inline QDBusReply<int> return_integet_and_set_integer(int argc_1, const QString &argc_22, QString &argc_2, QString &out1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(argc_1) << QVariant::fromValue(argc_22);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("return_integet_and_set_integer"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 3) {
            argc_2 = qdbus_cast<QString>(reply.arguments().at(1));
            out1 = qdbus_cast<QString>(reply.arguments().at(2));
        }
        return reply;
    }

    inline QDBusPendingReply<int> return_integet_and_set_integet_2(int argc_1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(argc_1);
        return asyncCallWithArgumentList(QStringLiteral("return_integet_and_set_integet_2"), argumentList);
    }

    inline QDBusPendingReply<QString> return_string()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("return_string"), argumentList);
    }

    inline QDBusPendingReply<QString> return_string_and_set_string(const QString &argc_1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(argc_1);
        return asyncCallWithArgumentList(QStringLiteral("return_string_and_set_string"), argumentList);
    }

    inline QDBusPendingReply<QVariantList> return_variantlist()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("return_variantlist"), argumentList);
    }

    inline QDBusPendingReply<> set_integer(int argc)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(argc);
        return asyncCallWithArgumentList(QStringLiteral("set_integer"), argumentList);
    }

    inline QDBusPendingReply<> set_string(const QString &argc)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(argc);
        return asyncCallWithArgumentList(QStringLiteral("set_string"), argumentList);
    }

    inline QDBusPendingReply<> set_variantlist(int cnt, const QVariantList &argc)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(cnt) << QVariant::fromValue(argc);
        return asyncCallWithArgumentList(QStringLiteral("set_variantlist"), argumentList);
    }

    inline QDBusPendingReply<int> set_variantlist_2(const QVariantList &argc)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(argc);
        return asyncCallWithArgumentList(QStringLiteral("set_variantlist_2"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace local {
  typedef ::LocalDbus_demo_exampleInterface dbus_demo_example;
}
#endif
